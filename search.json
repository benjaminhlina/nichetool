[{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"our-objectives","dir":"Articles","previous_headings":"","what":"Our Objectives","title":"How to use {nichetools}","text":"purpose vignette use {nicheROVER} {nichetools} extract visualize estimates trophic niche size similarities multiple freshwater fish using {ggplot2}. vignette can used additional purposes including estimating niche size similarities among different groups aquatic /terrestrial species. Furthermore, niche size similarities different behaviours exhibited within population can made using behavioural data generated acoustic telemetry (e.g., differences habitat occupancy).","code":""},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"bring-in-trophic-niche-data","dir":"Articles","previous_headings":"","what":"Bring in trophic niche data","title":"How to use {nichetools}","text":"First load necessary packages preform analysis visualization. use {nicheROVER} {nichetools} preform analysis. use {dplyr}, {tidyr}, {purrr} manipulate data iterate processes. Lastly, use {ggplot2}, {ggtext}, {patchwork} plot, add labels, arrange plots. add many dplyr tidyr functions processes can replaced using {data.table} great working large data sets. purpose vignette using fish data frame available within nicheROVER. remove \\(\\delta\\)34S simplicity vignette. two isotopes metrics used compare niche sizes similarities, please use functions pairing. Right now functions (.e., niche_ellipse()) nichetools doesn’t ability work two isotopes. become feature point now. Please patient use functions pairing . first use function janitor::clean_names() clean column names. purposes need replace fish data frame either loading csv, rds, qs, data. can multiple ways, prefer using readr::read_csv() base R’s read.csv() works perfectly fine. isotopic values run NA, need removed nicheROVER’s functions accommodate values NA.","code":"{   library(dplyr)   library(ggplot2)   library(ggtext)   library(ggh4x)   library(nicheROVER)    library(nichetools)   library(patchwork)   library(purrr)   library(stringr)   library(tidyr) } df <- fish %>%    janitor::clean_names()"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"estimate-posterior-distribution-with-normal-inverse-wishart-niw-priors-","dir":"Articles","previous_headings":"","what":"Estimate posterior distribution with Normal-Inverse-Wishart (NIW) priors.","title":"How to use {nichetools}","text":"take 1,000 posterior samples group. can change suggest nothing less 1,000. split data frame list species data frame object within list, iterate list, using map() {purrr}, estimate posterior distribution using Normal-Inverse-Wishart (NIW) priors.","code":"nsample <- 1000 fish_par <- df %>%    split(.$species) %>%    map(~ select(., d15n, d13c)) %>%    map(~ niw.post(nsample = nsample, X = .))"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"extract-mu-values","dir":"Articles","previous_headings":"","what":"Extract \\(\\mu\\) values","title":"How to use {nichetools}","text":"use extract_mu()extract posteriors \\(\\mu\\) estimates. default output extract_mu() long format works plotting {ggplot2} functions {nichetools}. want wide format can specify argument format \"wide\", however, unlikely need data wide format. default output lacking info plotting. need add column element abbreviation neutron number used axis labeling.","code":"df_mu <- extract_mu(fish_par) df_mu <- df_mu %>%   mutate(     element = case_when(       isotope == \"d15n\" ~ \"N\",       isotope == \"d13c\" ~ \"C\",     ),      neutron = case_when(       isotope == \"d15n\" ~ 15,       isotope == \"d13c\" ~ 13,     )    )"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"extract-sigma-values","dir":"Articles","previous_headings":"","what":"Extract \\(\\Sigma\\) values","title":"How to use {nichetools}","text":"use extract_sigma() extract posterior estimates \\(\\Sigma\\). default output extract_sigma() wide format doesn’t work plotting {ggplot2} work functions {nichetools}. want long plotting can specify argument format \"long\". plotting need extracted \\(\\Sigma\\) values long format. also need remove \\(\\Sigma\\) values isotope columns isotope.","code":"df_sigma <- extract_sigma(fish_par) df_sigma_cn <- extract_sigma(fish_par,                               format = \"long\") %>%   filter(id != isotope)"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"plot-posterior-distrubtion-of-mu-and-sigma","dir":"Articles","previous_headings":"","what":"Plot posterior distrubtion of \\(\\mu\\) and \\(\\Sigma\\)","title":"How to use {nichetools}","text":"plotting within vignette, split() data frame isotope, creating list use imap() iterate list create plots. use geom_density() represent densities \\(\\mu\\) \\(\\Sigma\\). Plot objects stored list. First plot \\(\\mu\\) isotope. use {patchwork} configure plots multi-panel figures. package phenomenal uses math operators configure manipulate plots create multi-panel figures. labeling also going use element_markdown() {ggtext} work labels needed correctly display isotopic signature. working data please replace.  labeling purposes need add columns element abbreviation neutron number. using case_when() vectorized else statements. Next plot posteriors \\(\\Sigma\\). ### Estimate niche ellipse use niche_ellipse() easily extract ellipse \\(\\Sigma\\) estimate (.e., 1000). additional isotopes metrics, need create mu sigma objects pairing, currently function handles two isotopes. future, likely ability specify number isotopes default two. reason lack functionality ellipse::ellipse() can work within two-dimensions, three, create multiple ellipse() calls combination isotopes metrics haven’t time implement . function also tell long took process large sets isotope data nice know time takes function work. randomly sample 10 ellipses 1,000. can change seems pretty standard.","code":"posterior_plots <- df_mu %>%   split(.$isotope) %>%   imap(     ~ ggplot(data = ., aes(x = mu_est)) +       geom_density(aes(fill = sample_name), alpha = 0.5) +       scale_fill_viridis_d(begin = 0.25, end = 0.75,                            option = \"D\", name = \"sample_name\") +       theme_bw() +       theme(panel.grid = element_blank(),             axis.title.x =  element_markdown(),             axis.title.y =  element_markdown(),             legend.position = \"none\"       ) +       labs(         x = paste(\"\\u00b5<sub>\\U03B4<\/sub>\", \"<sub><sup>\",                   unique(.$neutron), \"<\/sup><\/sub>\",                   \"<sub>\",unique(.$element), \"<\/sub>\", sep = \"\"),         y = paste0(\"p(\\u00b5 <sub>\\U03B4<\/sub>\",\"<sub><sup>\",                    unique(.$neutron), \"<\/sub><\/sup>\",                    \"<sub>\",unique(.$element),\"<\/sub>\",                    \" | X)\"), sep = \"\")   )  posterior_plots$d15n +   theme(legend.position.inside = c(0.18, 0.84)) +    posterior_plots$d13c df_sigma_cn <- df_sigma_cn %>%   mutate(     element_id = case_when(       id == \"d15n\" ~ \"N\",       id == \"d13c\" ~ \"C\",     ),     neutron_id = case_when(       id == \"d15n\" ~ 15,       id == \"d13c\" ~ 13,     ),     element_iso = case_when(       isotope == \"d15n\" ~ \"N\",       isotope == \"d13c\" ~ \"C\",     ),     neutron_iso = case_when(       isotope == \"d15n\" ~ 15,       isotope == \"d13c\" ~ 13,     )   ) sigma_plots <- df_sigma_cn %>%   group_split(id, isotope) %>%   imap(     ~ ggplot(data = ., aes(x = post_sample)) +       geom_density(aes(fill = sample_name), alpha = 0.5) +       scale_fill_viridis_d(begin = 0.25, end = 0.75,                            option = \"D\", name = \"sample_name\") +       theme_bw() +       theme(panel.grid = element_blank(),             axis.title.x =  element_markdown(),             axis.title.y =  element_markdown(),             legend.position = \"none\"       ) +       labs(         x = paste(\"\\U03A3\",\"<sub>\\U03B4<\/sub>\",                   \"<sub><sup>\", unique(.$neutron_id), \"<\/sub><\/sup>\",                   \"<sub>\",unique(.$element_id),\"<\/sub>\",\" \",                   \"<sub>\\U03B4<\/sub>\",                   \"<sub><sup>\", unique(.$neutron_iso), \"<\/sub><\/sup>\",                   \"<sub>\",unique(.$element_iso),\"<\/sub>\", sep = \"\"),         y = paste(\"p(\", \"\\U03A3\",\"<sub>\\U03B4<\/sub>\",                   \"<sub><sup>\", unique(.$neutron_id), \"<\/sub><\/sup>\",                   \"<sub>\",unique(.$element_id),\"<\/sub>\",\" \",                   \"<sub>\\U03B4<\/sub>\",                   \"<sub><sup>\", unique(.$neutron_iso), \"<\/sub><\/sup>\",                   \"<sub>\",unique(.$element_iso),\"<\/sub>\", \" | X)\", sep = \"\"),       )   )  sigma_plots[[1]] +    theme(legend.position.inside = c(0.1, 0.82)) ellipse_df <- niche_ellipse(dat_mu = df_mu, dat_sigma = df_sigma) #> → Total time processing was 4.62 secs set.seed(14)  random_ellipse <- ellipse_df %>%    group_by(sample_name, sample_number) %>%    nest() %>%   group_by(sample_name) %>%    slice_sample(n = 10, replace = TRUE) %>%    ungroup() %>%    unnest(cols = c(data))"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"plot-ellipses-densities-of-each-istope-and-isotope-biplot","dir":"Articles","previous_headings":"","what":"Plot ellipses, densities of each istope, and isotope biplot","title":"How to use {nichetools}","text":"first plot ellipse sample_name need turn df long format iterate using imap() easily create density plots. notice use case_when() make columns element abbreviations neutron numbers used plot labeling. make density plots isotope using geom_density() Lastly use geom_point() make isotopic biplot.","code":"ellipse_plots <- ggplot() +    geom_polygon(data = random_ellipse,                mapping = aes(x = d13c, y = d15n,                              group = interaction(sample_number, sample_name),                              color = sample_name),                fill = NA,                linewidth = 0.5) +       scale_colour_viridis_d(begin = 0.25, end = 0.75,                           option = \"D\", name = \"species\",   ) +    scale_x_continuous(breaks = rev(seq(-20, -40, -2))) +   scale_y_continuous(breaks = seq(6, 16, 2)) +   theme_bw(base_size = 10) +   theme(axis.text = element_text(colour = \"black\"),         panel.grid = element_blank(),          legend.position = \"none\",          legend.title = element_text(hjust = 0.5),         legend.background = element_blank()) +    labs(x = expression(paste(delta ^ 13, \"C\")),         y = expression(paste(delta ^ 15, \"N\"))) iso_long <- df %>%   pivot_longer(cols = -species,                names_to = \"isotope\",                 values_to = \"value\") %>%    mutate(     element = case_when(       isotope == \"d15n\" ~ \"N\",       isotope == \"d13c\" ~ \"C\",     ),      neutron = case_when(       isotope == \"d15n\" ~ 15,       isotope == \"d13c\" ~ 13,     )   ) iso_density <- iso_long %>%    group_split(isotope) %>%    imap(     ~ ggplot(data = .) +        geom_density(aes(x = value,                         fill = species),                     alpha = 0.35,                     linewidth = 0.8) +       scale_fill_viridis_d(begin = 0.25, end = 0.75,                            option = \"D\", name = \"Species\") +       theme_bw(base_size = 10) +       theme(axis.text = element_text(colour = \"black\"),             panel.grid = element_blank(),              legend.position.inside = c(0.15, 0.65),              legend.background = element_blank(),              axis.title.x = element_markdown(family = \"sans\")) +        labs(x =  paste(\"\\U03B4\",                       \"<sup>\", unique(.$neutron), \"<\/sup>\",unique(.$element),                        sep = \"\"),             y = \"Density\")   )  d13c_density <- iso_density[[1]] +    scale_x_continuous(breaks = rev(seq(-20, -34, -2)),                      limits = rev(c(-20, -34)))  d15n_density <- iso_density[[2]] +   scale_x_continuous(breaks = seq(5, 15, 2.5),                       limits = c(5, 15)) +    theme(     legend.position = \"none\"   ) iso_biplot <- ggplot() +    geom_point(data = df, aes(x = d13c, y = d15n,                             fill = species),              shape = 21, colour = \"black\",               stroke = 0.8,              size = 3, alpha = 0.70) +   scale_fill_viridis_d(begin = 0.25, end = 0.75,                        option = \"D\", name = \"species\") +   scale_x_continuous(breaks = rev(seq(-20, -39, -1))) +   scale_y_continuous(breaks = seq(5, 17, 1)) +   theme_bw(base_size = 10) +   theme(axis.text = element_text(colour = \"black\"),         panel.grid = element_blank(),          legend.position = \"none\",          legend.title.align = 0.5,         legend.background = element_blank()) +    labs(x = expression(paste(delta ^ 13, \"C\")),         y = expression(paste(delta ^ 15, \"N\"))) #> Warning: The `legend.title.align` argument of `theme()` is deprecated as of ggplot2 #> 3.5.0. #> ℹ Please use theme(legend.title = element_text(hjust)) instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"use-patchwork-to-make-ellipse-density-and-biplots-into-a-paneled-figure-","dir":"Articles","previous_headings":"","what":"Use {patchwork} to make ellipse, density, and biplots into a paneled figure.","title":"How to use {nichetools}","text":"can also use function plot_annotation() add lettering figure can used figure description. maneuver plot_annotation() places lettering, need add plot.tag.position = c(x, y) theme() call every plot.","code":"d13c_density + ellipse_plots + iso_biplot + d15n_density +   plot_annotation(tag_levels = \"a\",                    tag_suffix = \")\")"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"determine-the-95-niche-similarties-for-each-species","dir":"Articles","previous_headings":"","what":"Determine the 95% niche similarties for each species","title":"How to use {nichetools}","text":"use overlap() function {nicheROVER} estimate percentage similarity among species. set overlap assess based 95% similarities. going transform output data frame using extract_overlap() plotting can assess overall similarities among species. going take newly made data frame extract mean percentage similarities 2.5% 97.5% quarantines. plot lines dotted lines percent similarity density figure. now going use ggplot(), geom_density(), fact_grid2() {ggh4x}.","code":"over_stat <- overlap(fish_par, nreps = nsample, nprob = 1000,                       alpha = 0.95) over_stat_df <- extract_overlap(data = over_stat) %>%      mutate(       niche_overlap_perc = niche_overlap * 100   ) over_sum <- over_stat_df %>%    group_by(sample_name_a, sample_name_b) %>%    summarise(     mean_niche_overlap = round(mean(niche_overlap_perc), digits = 2),     qual_2.5 = round(quantile(niche_overlap_perc, probs = 0.025, na.rm = TRUE), digits = 2),      qual_97.5 = round(quantile(niche_overlap_perc, probs = 0.975, na.rm = TRUE), digits = 2)   ) %>%    ungroup() %>%    pivot_longer(cols = -c(sample_name_a, sample_name_b, mean_niche_overlap),                 names_to = \"percentage\",                 values_to = \"niche_overlap_qual\") %>%    mutate(     percentage = as.numeric(str_remove(percentage, \"qual_\"))   ) ggplot(data = over_stat_df, aes(x = niche_overlap_perc)) +    geom_density(aes(fill = sample_name_a)) +    geom_vline(data = over_sum, aes(xintercept = mean_niche_overlap),               colour = \"black\", linewidth = 1) +   geom_vline(data = over_sum, aes(xintercept = niche_overlap_qual),               colour = \"black\", linewidth = 1, linetype = 6) +   scale_fill_viridis_d(begin = 0.25, end = 0.75,                        option = \"D\", name = \"Species\",                         alpha = 0.35) +    facet_grid2(sample_name_a ~ sample_name_b,                       independent = \"y\",                      scales = \"free_y\") +    theme_bw() +    theme(     panel.grid = element_blank(),      axis.text = element_text(colour = \"black\"),      legend.background = element_blank(),     strip.background = element_blank()   ) +   labs(x = paste(\"Overlap Probability (%)\", \"\\u2013\",                   \"Niche Region Size: 95%\"),         y = \"p(Percent Overlap | X)\")"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"estimate-overall-niche-size","dir":"Articles","previous_headings":"","what":"Estimate overall niche size","title":"How to use {nichetools}","text":"now going estimate overall size niche posterior sample using function extract_niche_size() wrapper around niche.size() data manipulation functions. can calculate mean niche size, standard deviation, standard error.","code":"niche_size <- extract_niche_size(fish_par) niche_size_mean <- niche_size %>%    group_by(sample_name) %>%    summarise(     mean_niche = round(mean(niche_size), digits = 2),      sd_niche = round(sd(niche_size), digits = 2),      sem_niche = round(sd(niche_size) / sqrt(n()), digits = 2)   )"},{"path":"https://benjaminhlina.github.io/nichetools/articles/how_to_use_nichetools.html","id":"plot-niche-size","dir":"Articles","previous_headings":"","what":"Plot niche size","title":"How to use {nichetools}","text":"now use geom_violin(), geom_point(), geom_errorbar() plot distribution niche size species. Now niche sizes similarities determined can make inferences species, trophic similarities, ecosystem.","code":"ggplot(data = niche_size) +    geom_violin(     aes(x = sample_name, y = niche_size),     width = 0.2) +    geom_point(data = niche_size_mean, aes(x = sample_name, y = mean_niche)) +   geom_errorbar(data = niche_size_mean, aes(x = sample_name,                                              ymin = mean_niche  - sem_niche,                                              ymax = mean_niche  + sem_niche),                  width = 0.05) +   theme_bw(base_size = 15) +    theme(panel.grid = element_blank(),          axis.text = element_text(colour = \"black\")) +    labs(x = \"Species\",         y = \"Niche Size\")"},{"path":"https://benjaminhlina.github.io/nichetools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin L. Hlina. Maintainer.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hlina BL (2024). nichetools: Complementary package nicheROVER. R package version 0.1.0, https://benjaminhlina.github.io/nichetool/.","code":"@Manual{,   title = {nichetools: Complementary package to nicheROVER},   author = {Benjamin L. Hlina},   year = {2024},   note = {R package version 0.1.0},   url = {https://benjaminhlina.github.io/nichetool/}, }"},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"nichetools-","dir":"","previous_headings":"","what":"Complementary package to nicheROVER","title":"Complementary package to nicheROVER","text":"{nichetools} complementary package {nicheROVER} allows user extract Bayesian estimates data objects created {nicheROVER} (e.g., niche size similarities).","code":""},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Complementary package to nicheROVER","text":"can install development version {nichetools} using following:","code":"install.packages(\"devtools\") devtools::install_github(\"benjaminhlina/nichetools\")"},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"progress","dir":"","previous_headings":"","what":"Progress","title":"Complementary package to nicheROVER","text":"build tests extract_mu() build tests extract_sigma() build tests niche_ellipse() build tests extract_overlap() build tests extract_niche_size() Create vignette/modify blog post vignette","code":""},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Complementary package to nicheROVER","text":"cite package please cite following publications Swanson, H.K., Lysy, M., Power, M., Stasko, .D., Johnson, J.D., Reist, J.D. 2015. new probabilistic method quantifying n-dimensional ecological niches niche overlap. Ecology 96(2): 318–324. doi:10.1890/14-0235.1 Hlina BL (2024). nichetools: Complementary package nicheROVER. R package version 0.1.0, https://benjaminhlina.github.io/nichetool/","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_mu.html","id":null,"dir":"Reference","previous_headings":"","what":"extract μ — extract_mu","title":"extract μ — extract_mu","text":"Extract Bayesian estimates μ function niw.post() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_mu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract μ — extract_mu","text":"","code":"extract_mu(data, format = \"long\")"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_mu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract μ — extract_mu","text":"data list created function niw.post() package nicheROVER. format character decided whether returned object long wide format. Default \"long\", alternative supplied \"wide\".","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_mu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract μ — extract_mu","text":"Returns tibble extracted estimates μ created function niw.post() package nicheROVER. tibble contain five columns following order, metric, sample_name, sample_number, names isotope columns supplied niw.post() (e.g., d15n d13c).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_mu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract μ — extract_mu","text":"","code":"extract_mu( data = niw_fish_post ) #> # A tibble: 8,000 × 5 #>    metric sample_name sample_number isotope mu_est #>    <chr>  <chr>               <int> <chr>    <dbl> #>  1 mu     ARCS                    1 d15n      12.6 #>  2 mu     ARCS                    1 d13c     -24.0 #>  3 mu     ARCS                    2 d15n      12.7 #>  4 mu     ARCS                    2 d13c     -23.9 #>  5 mu     ARCS                    3 d15n      12.6 #>  6 mu     ARCS                    3 d13c     -23.8 #>  7 mu     ARCS                    4 d15n      12.5 #>  8 mu     ARCS                    4 d13c     -23.9 #>  9 mu     ARCS                    5 d15n      12.4 #> 10 mu     ARCS                    5 d13c     -24.0 #> # ℹ 7,990 more rows  # ---- below will be turned into vignette when finished ---- if (FALSE) { # load packages {   library(dplyr)   library(janitor)   library(nicheROVER)   library(nichetools)   library(purrr)  }  # get fish data frame, and remove sulfur for the example df <- fish %>%     janitor::clean_names()  # create number of samples used in nicheROVER nsample <- 1000  # split the data frame by species and select isotopes of interest df_split <- df %>%   split(.$species) %>%   map(~ select(., d15n, d13c))  # extract the names of each list to name each object in list df_names <- df %>%    group_by(species) %>%    group_keys() %>%    ungroup() %>%    mutate(      id = 1:nrow(.)      )  # name each object in list names(df_split) <- df_names$species  # create niw posterior samples niw_fish_post <- df_split %>%   map(~niw.post(nsample = nsample, X = .))  # ---- extract mu estimates ---- extract_mu( data = niw_fish_post ) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_niche_size.html","id":null,"dir":"Reference","previous_headings":"","what":"extract niche size — extract_niche_size","title":"extract niche size — extract_niche_size","text":"Extract niche size based elliptical niche region Bayesian estimates sigma created function niw.post() package nicheROVER. function wrapper around nicheROVER::niche.size.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_niche_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract niche size — extract_niche_size","text":"","code":"extract_niche_size(data, name = NULL, prob = NULL)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_niche_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract niche size — extract_niche_size","text":"data list created function niw.post() package nicheROVER. name character string assinged column name groups. Default sample_name. prob numeric bound 0 1 indicating probabilistic niche size. Default 0.95.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_niche_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract niche size — extract_niche_size","text":"tibble containing three rows, sample_name, id, niche_size.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_niche_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract niche size — extract_niche_size","text":"","code":"niche_size <- extract_niche_size(data = niw_fish_post)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"extract overlap — extract_overlap","title":"extract overlap — extract_overlap","text":"Extract Bayesian estimates similarities among groups produced following function overlap() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract overlap — extract_overlap","text":"","code":"extract_overlap(data, name_a = NULL, name_b = NULL)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract overlap — extract_overlap","text":"data array object containing matrices created function overlap() package nicheROVER. name_a character string supply first sample_name used overlap(). Defaults \"sample_name_a\". name_b character string supply second sample_name used overlap(). Defaults \"sample_name_b\".","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract overlap — extract_overlap","text":"tibble containing five rows, sample_name_a, id, sample_name_b, sample_number, niche_overlap.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract overlap — extract_overlap","text":"","code":"if (FALSE) { extract_overlap(data = over_stat) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Σ extract — extract_sigma","title":"Σ extract — extract_sigma","text":"Extract Bayesian estimates Σ function niw.post() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Σ extract — extract_sigma","text":"","code":"extract_sigma(data, isotope_a = NULL, isotope_b = NULL, format = \"wide\")"},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Σ extract — extract_sigma","text":"data list created function niw.post() package nicheROVER isotope_a character string supply first isotope used niw.post(). Defaults \"d15n\". isotope_b characterstring supply second isotope used niw.post(). Defaults \"d13c\". format format character decided whether returned object long wide format. Default \"wide\", alternative supplied \"long\".","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Σ extract — extract_sigma","text":"Returns tibble extracted estimates Σ created function niw.post() package nicheROVER. tibble contain five columns following order, metric, id, sample_name, isotope, sample_number, posterior sample Σ (.e., post_sample).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/extract_sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Σ extract — extract_sigma","text":"","code":"extract_sigma( data = niw_fish_post ) #> # A tibble: 8,000 × 6 #>    metric sample_name isotope sample_number  d15n  d13c #>    <chr>  <chr>       <chr>   <chr>         <dbl> <dbl> #>  1 sigma  ARCS        d15n    1             0.501 0.216 #>  2 sigma  ARCS        d13c    1             0.216 1.07  #>  3 sigma  ARCS        d15n    2             0.577 0.206 #>  4 sigma  ARCS        d13c    2             0.206 0.844 #>  5 sigma  ARCS        d15n    3             0.725 0.449 #>  6 sigma  ARCS        d13c    3             0.449 1.48  #>  7 sigma  ARCS        d15n    4             0.888 0.324 #>  8 sigma  ARCS        d13c    4             0.324 1.07  #>  9 sigma  ARCS        d15n    5             0.681 0.266 #> 10 sigma  ARCS        d13c    5             0.266 0.970 #> # ℹ 7,990 more rows # ---- below will be turned into vignette when finished ---- if (FALSE) { # load packages {   library(dplyr)   library(janitor)   library(nicheROVER)   library(nichetools)   library(purrr)   }  # ---- To understand how niw_fish_post is being created ----  # get fish data frame, and remove sulfur for the example df <- fish %>%     janitor::clean_names()  # create number of samples used in nicheROVER nsample <- 1000  # split the data frame by species and select isotopes of interest df_split <- df %>%   split(.$species) %>%   map(~ select(., d15n, d13c))  # extract the names of each list to name each object in list df_names <- df %>%    group_by(species) %>%    group_keys() %>%    ungroup() %>%    mutate(      id = 1:nrow(.)      )  # name each object in list names(df_split) <- df_names$species  # create niw posterior samples niw_fish_post <- df_split %>%   map(~niw.post(nsample = nsample, X = .))  # we can then use extract_sigma() to extract sigma from niw_fish_post df_sigma <- extract_sigma(   data = niw_fish_post   )  # --- to use with `niche_ellipse()` we need to make into wide format ---- df_sigma_wide <- df_sigma |> tidyr::pivot_wider(names_from = id,             values_from = post_sample) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame containing posterior estimates of μ — mu_est_long","title":"A data.frame containing posterior estimates of μ — mu_est_long","text":"Posterior estimates μ using fish data set nicheROVER, using  Normal-Inverse-Wishart (NIW) priors.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame containing posterior estimates of μ — mu_est_long","text":"","code":"mu_est_long"},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame containing posterior estimates of μ — mu_est_long","text":"data.frame containing 8,000 rows 7 variables metric name metric extracted niw.post() species species abbreviation sample_number sample number 1-1000 isotope column isotope name mu_est estimate mu produced niw.post() element isotopic element used labelling neutron neutron number used labelling","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"function allows user supply Bayesian estimates μ Σ  create estimated Bayesian ellipse niche region.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"","code":"niche_ellipse(   dat_mu,   dat_sigma,   isotope_a = NULL,   isotope_b = NULL,   p_ell = NULL,   message = TRUE )"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"dat_mu data.frame containing μ Bayesian estimates. data.frame needs long format μ estimate isotope stacked top . can produced using mu_extract(). dat_sigma data.frame containing Σ Bayesian estimates. data.frame needs wide format, sigma/covariance matrices stacked onto . See example convert wide format. can produced using sigma_extract(). isotope_a character string column name first isotope used dat_sigma. Defaults \"d15n\". isotope_b character string column name second isotope used dat_sigma. Defaults \"d13c\". p_ell confidence interval ellipse estimate. Default 0.95 (.e., 95% confidence interval). value bound 0 1 numeric. message Control whether time processing displayed end function. Default TRUE.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"tibble containing, sample_name, sample_number, isotopes used estimation ellipse (.e., d15n, d13c).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"","code":"if (FALSE) { niche_ellipse(dat_mu = mu_est_long,               dat_sigma = sigma_est_wide) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/nichetools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nichetools: Complementary package to nicheROVER — nichetools-package","title":"nichetools: Complementary package to nicheROVER — nichetools-package","text":"package complementary nicheROVER allows user extract Bayesian estimates data objects created package nicheROVER.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of the posterior estimates of μ and Σ — niw_fish_post","title":"A list of the posterior estimates of μ and Σ — niw_fish_post","text":"Posterior estimates μ Σ using fish data set nicheROVER, using Normal-Inverse-Wishart (NIW) priors. list produced  using function niw.post() nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of the posterior estimates of μ and Σ — niw_fish_post","text":"","code":"niw_fish_post"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of the posterior estimates of μ and Σ — niw_fish_post","text":"list elements μ Σ sizes c(nsamples, length(lambda)) c(dim(Psi).","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame containing the estimates of percentage of overlap among groups — over_stat","title":"A data.frame containing the estimates of percentage of overlap among groups — over_stat","text":"Estimates percentage overlap among example species used nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame containing the estimates of percentage of overlap among groups — over_stat","text":"","code":"over_stat"},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame containing the estimates of percentage of overlap among groups — over_stat","text":"arraycontaining matrices percent overlap group used Bayesian estimates μ Σ using Normal-Inverse-Wishart (NIW) priors calculated niw.post().","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame containing posterior estimates of Σ — sigma_est_wide","title":"A data.frame containing posterior estimates of Σ — sigma_est_wide","text":"Posterior estimates Σ using fish data set nicheROVER, using Normal-Inverse-Wishart (NIW) priors","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame containing posterior estimates of Σ — sigma_est_wide","text":"","code":"sigma_est_wide"},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame containing posterior estimates of Σ — sigma_est_wide","text":"data.frame containing 8,000 rows 6 variables metric name metric extracted niw.post() species species abbreviation isotope column isotope name sample_number sample number 1-1000 d15n estimate sigma d15n produced niw.post() d13c estimate sigma d13c produced niw.post()","code":""}]
