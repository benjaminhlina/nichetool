[{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin L. Hlina. Maintainer.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"HLina BL (2024). nichetools: Complementary package 'nicheROVER'. R package version 0.1.0, https://benjaminhlina.github.io/nichetool/.","code":"@Manual{,   title = {nichetools: Complementary package to `{nicheROVER}`},   author = {Benjamin L. HLina},   year = {2024},   note = {R package version 0.1.0},   url = {https://benjaminhlina.github.io/nichetool/}, }"},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"nichetools-","dir":"","previous_headings":"","what":"Complementary package to `{nicheROVER}`","title":"Complementary package to `{nicheROVER}`","text":"{nichetools} complementary package {nicheROVER} allows user extract Bayesian estimates data objects created {nicheROVER} (e.g., niche size similarities).","code":""},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Complementary package to `{nicheROVER}`","text":"can install development version {nichetools} using following:","code":"install.packages(\"devtools\") devtools::install_github(\"benjaminhlina/nichetools\")"},{"path":"https://benjaminhlina.github.io/nichetools/index.html","id":"progress","dir":"","previous_headings":"","what":"Progress","title":"Complementary package to `{nicheROVER}`","text":"build tests mu_extract() build tests sigma_extract() build tests niche_ellipse() build tests overlap_extract() build tests niche_size_extract()","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame of estimates of μ from Normal-Inverse-Wishart (NIW) — mu_est_long","title":"A data.frame of estimates of μ from Normal-Inverse-Wishart (NIW) — mu_est_long","text":"Estimates μ Normal-Inverse-Wishart (NIW) priors example data frame nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame of estimates of μ from Normal-Inverse-Wishart (NIW) — mu_est_long","text":"","code":"mu_est_long"},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_est_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame of estimates of μ from Normal-Inverse-Wishart (NIW) — mu_est_long","text":"data.frame containing 8,000 rows 7 variables metric name metric extracted niw.post() species species abbreviation sample_number sample number 1-1000 isotope column isotope name mu_est estimate mu produced niw.post() element isotopic element used labelling neutron neutron number used labelling","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"μ extract — mu_extract","title":"μ extract — mu_extract","text":"Extract Bayesian estimates μ function niw.post() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"μ extract — mu_extract","text":"","code":"mu_extract(data)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"μ extract — mu_extract","text":"data list created function niw.post() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"μ extract — mu_extract","text":"Returns tibble extracted estimates μ created function niw.post() package nicheROVER. tibble contain five columns following order, metric, sample_name, sample_number, names isotope columns supplied niw.post() (e.g., d15n d13c).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/mu_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"μ extract — mu_extract","text":"","code":"mu_extract( data = niw_fish_post ) #> # A tibble: 4,000 × 5 #>    metric sample_name sample_number  d15n  d13c #>    <chr>  <chr>               <int> <dbl> <dbl> #>  1 mu     ARCS                    1  12.6 -24.0 #>  2 mu     ARCS                    2  12.7 -23.9 #>  3 mu     ARCS                    3  12.6 -23.8 #>  4 mu     ARCS                    4  12.5 -23.9 #>  5 mu     ARCS                    5  12.4 -24.0 #>  6 mu     ARCS                    6  12.7 -24.0 #>  7 mu     ARCS                    7  12.6 -23.8 #>  8 mu     ARCS                    8  12.7 -23.9 #>  9 mu     ARCS                    9  12.6 -24.2 #> 10 mu     ARCS                   10  12.8 -24.0 #> # ℹ 3,990 more rows  # ---- below will be turned into vignette when finished ---- if (FALSE) { # load packages {   library(dplyr)   library(janitor)   library(nicheROVER)   library(nichetools)   library(purrr)  }  # get fish data frame, and remove sulfur for the example df <- fish %>%     janitor::clean_names()  # create number of samples used in nicheROVER nsample <- 1000  # split the data frame by species and select isotopes of interest df_split <- df %>%   split(.$species) %>%   map(~ select(., d15n, d13c))  # extract the names of each list to name each object in list df_names <- df %>%    group_by(species) %>%    group_keys() %>%    ungroup() %>%    mutate(      id = 1:nrow(.)      )  # name each object in list names(df_split) <- df_names$species  # create niw posterior samples niw_fish_post <- df_split %>%   map(~niw.post(nsample = nsample, X = .))  # ---- extract mu estimates ---- mu_extract( data = niw_fish_post ) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"function allows user supply Bayesian estimates μ Σ  create estimated Bayesian ellipse niche region.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"","code":"niche_ellipse(   dat_mu,   dat_sigma,   isotope_a = NULL,   isotope_b = NULL,   p_ell = NULL,   message = TRUE )"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"dat_mu data.frame containing μ Bayesian estimates. data.frame needs long format μ estimate isotope stacked top . can produced using mu_extract(). dat_sigma data.frame containing Σ Bayesian estimates. data.frame needs wide format, sigma/covariance matrices stacked onto . See example convert wide format. can produced using sigma_extract(). isotope_a character string column name first isotope used dat_sigma. Defaults \"d15n\". isotope_b character string column name second isotope used dat_sigma. Defaults \"d13c\". p_ell confidence interval ellipse estimate. Default 0.95 (.e., 95% confidence interval). value bound 0 1 numeric. message Control whether time processing displayed end function. Default TRUE.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"tibble containing, sample_name, sample_number, isotopes used estimation ellipse (.e., d15n, d13c).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ellipses based on Bayesian estimates of μ and Σ — niche_ellipse","text":"","code":"if (FALSE) { niche_ellipse(dat_mu = mu_est_long,               dat_sigma = sigma_est_wide) }"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_size_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Niche Size Extract — niche_size_extract","title":"Niche Size Extract — niche_size_extract","text":"Extract niche size based elliptical niche region Bayesian estimates sigma created function niw.post() package nicheROVER. function wrapper around nicheROVER::niche.size.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_size_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Niche Size Extract — niche_size_extract","text":"","code":"niche_size_extract(data, name = NULL, prob = NULL)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_size_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Niche Size Extract — niche_size_extract","text":"data list created function niw.post() package nicheROVER. name character string assinged column name groups. Default sample_name. prob numeric bound 0 1 indicating probabilistic niche size. Default 0.95.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_size_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Niche Size Extract — niche_size_extract","text":"tibble containing three rows, sample_name, id, niche_size.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/niche_size_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Niche Size Extract — niche_size_extract","text":"","code":"niche_size <- niche_size_extrac(data = niw_fish_post) #> Error in niche_size_extrac(data = niw_fish_post): could not find function \"niche_size_extrac\""},{"path":"https://benjaminhlina.github.io/nichetools/reference/nichetools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nichetools: Complementary package to `nicheROVER` — nichetools-package","title":"nichetools: Complementary package to `nicheROVER` — nichetools-package","text":"package complementary nicheROVER allows user extract Bayesian estimates data objects created package nicheROVER.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":null,"dir":"Reference","previous_headings":"","what":"A listof the estimates of μ and Σ from Normal-Inverse-Wishart (NIW) prior — niw_fish_post","title":"A listof the estimates of μ and Σ from Normal-Inverse-Wishart (NIW) prior — niw_fish_post","text":"Estimates μ Σ Normal-Inverse-Wishart (NIW) priors example data. list produced using using function niw.post() nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A listof the estimates of μ and Σ from Normal-Inverse-Wishart (NIW) prior — niw_fish_post","text":"","code":"niw_fish_post"},{"path":"https://benjaminhlina.github.io/nichetools/reference/niw_fish_post.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A listof the estimates of μ and Σ from Normal-Inverse-Wishart (NIW) prior — niw_fish_post","text":"list elements μ Σ sizes c(nsamples, length(lambda)) c(dim(Psi).","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame of estimates of percentage of overlap among groups produced by\nniw.post() — over_stat","title":"A data.frame of estimates of percentage of overlap among groups produced by\nniw.post() — over_stat","text":"Estimates percentage overlap among example species used nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame of estimates of percentage of overlap among groups produced by\nniw.post() — over_stat","text":"","code":"over_stat"},{"path":"https://benjaminhlina.github.io/nichetools/reference/over_stat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame of estimates of percentage of overlap among groups produced by\nniw.post() — over_stat","text":"arraycontaining matrices percent overlap group used Bayesian estimates μ Σ Normal-Inverse-Wishart (NIW) prior calculated niw.post().","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/overlap_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap extract — overlap_extract","title":"Overlap extract — overlap_extract","text":"Extract Bayesian estimates similarities among groups produced following function overlap() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/overlap_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap extract — overlap_extract","text":"","code":"overlap_extract(data, name_a = NULL, name_b = NULL)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/overlap_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap extract — overlap_extract","text":"data array object containing matrices created function overlap() package nicheROVER. name_a character string supply first sample_name used overlap(). Defaults \"sample_name_a\". name_b character string supply second sample_name used overlap(). Defaults \"sample_name_b\".","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/overlap_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlap extract — overlap_extract","text":"tibble containing five rows, sample_name_a, id, sample_name_b, sample_number, niche_overlap.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/overlap_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlap extract — overlap_extract","text":"","code":"# overlap_extract()"},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"A data.frame of estimates of Σ from Normal-Inverse-Wishart (NIW) prior — sigma_est_wide","title":"A data.frame of estimates of Σ from Normal-Inverse-Wishart (NIW) prior — sigma_est_wide","text":"Estimates Σ Normal-Inverse-Wishart (NIW) priors example data frame nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data.frame of estimates of Σ from Normal-Inverse-Wishart (NIW) prior — sigma_est_wide","text":"","code":"sigma_est_wide"},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_est_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data.frame of estimates of Σ from Normal-Inverse-Wishart (NIW) prior — sigma_est_wide","text":"data.frame containing 8,000 rows 6 variables metric name metric extracted niw.post() species species abbreviation isotope column isotope name sample_number sample number 1-1000 d15n estimate sigma d15n produced niw.post() d13c estimate sigma d13c produced niw.post()","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Σ extract — sigma_extract","title":"Σ extract — sigma_extract","text":"Extract Bayesian estimates Σ function niw.post() package nicheROVER.","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Σ extract — sigma_extract","text":"","code":"sigma_extract(data, isotope_a = NULL, isotope_b = NULL)"},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Σ extract — sigma_extract","text":"data list created function niw.post() package nicheROVER isotope_a character string supply first isotope used niw.post(). Defaults \"d15n\". isotope_b characterstring supply second isotope used niw.post(). Defaults \"d13c\".","code":""},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Σ extract — sigma_extract","text":"Returns tibble extracted estimates Σ created function niw.post() package nicheROVER. tibble contain five columns following order, metric, id, sample_name, isotope, sample_number, posterior sample Σ (.e., post_sample).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/nichetools/reference/sigma_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Σ extract — sigma_extract","text":"","code":"sigma_extract( data = niw_fish_post ) #> # A tibble: 16,000 × 6 #>    metric id    sample_name isotope sample_number post_sample #>    <chr>  <chr> <chr>       <chr>   <chr>               <dbl> #>  1 sigma  d15n  ARCS        d15n    1                   0.501 #>  2 sigma  d15n  ARCS        d13c    1                   0.216 #>  3 sigma  d15n  ARCS        d15n    2                   0.577 #>  4 sigma  d15n  ARCS        d13c    2                   0.206 #>  5 sigma  d15n  ARCS        d15n    3                   0.725 #>  6 sigma  d15n  ARCS        d13c    3                   0.449 #>  7 sigma  d15n  ARCS        d15n    4                   0.888 #>  8 sigma  d15n  ARCS        d13c    4                   0.324 #>  9 sigma  d15n  ARCS        d15n    5                   0.681 #> 10 sigma  d15n  ARCS        d13c    5                   0.266 #> # ℹ 15,990 more rows # ---- below will be turned into vignette when finished ---- if (FALSE) { # load packages {   library(dplyr)   library(janitor)   library(nicheROVER)   library(nichetools)   library(purrr)   }  # ---- To understand how niw_fish_post is being created ----  # get fish data frame, and remove sulfur for the example df <- fish %>%     janitor::clean_names()  # create number of samples used in nicheROVER nsample <- 1000  # split the data frame by species and select isotopes of interest df_split <- df %>%   split(.$species) %>%   map(~ select(., d15n, d13c))  # extract the names of each list to name each object in list df_names <- df %>%    group_by(species) %>%    group_keys() %>%    ungroup() %>%    mutate(      id = 1:nrow(.)      )  # name each object in list names(df_split) <- df_names$species  # create niw posterior samples niw_fish_post <- df_split %>%   map(~niw.post(nsample = nsample, X = .))  # we can then use sigma_extract() to extract sigma from niw_fish_post df_sigma <- sigma_extract(   data = niw_fish_post   )  # --- to use with `niche_ellipse()` we need to make into wide format ---- df_sigma_wide <- df_sigma |> tidyr::pivot_wider(names_from = id,             values_from = post_sample) }"}]
